--ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW  -- Check range
SELECT 
 SalesGroup,
   Country,
 AnnualSales,
   COUNT(AnnualSales) OVER(PARTITION BY SalesGroup
ORDER BY AnnualSales DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CountryCount,
  SUM(AnnualSales) OVER(PARTITION BY SalesGroup
      ORDER BY AnnualSales DESC  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalSales
	FROM
	  RegionalSales;

---------------------------------------------
	  SELECT 
 SalesGroup,
   Country,
 AnnualSales,
   COUNT(AnnualSales) OVER(PARTITION BY SalesGroup
ORDER BY AnnualSales DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CountryCount,
  SUM(AnnualSales) OVER(PARTITION BY SalesGroup
      ORDER BY AnnualSales DESC  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalSales
	FROM
	  RegionalSales;
----------------------------------------------------------------------------------------------------
--Scenario2 on  Cummulative Total


select c.ProductCategoryName,p.ProductName,sum(p.SellingPrice*s.Qty ) as Total
,sum(sum(p.SellingPrice*s.Qty )) over ( partition by c.ProductCategoryName order by sum(p.SellingPrice*s.Qty ) 
rows between unbounded preceding and current row) as RunningTotal
from [ProductCategoryTable] c
inner join 
[ProductsTable] p
on c.ProductCategoryID=p.ProductCategoryID
inner join ProductQuantitySold s
on p.ProductID=s.ProductID
group by c.ProductCategoryName,p.ProductName
order by c.ProductCategoryName,Total

--########################   CASE with LAG  ############################----

SELECT ProductCategoryName
	,ProductName
	,StockYear
	,EndStock 
	,
	case
	
		when (LAG(EndStock, 1,0) over(partition by ProductCategoryName,ProductName ORDER BY stockYear)) = 0 THEN 0

		Else (EndStock - (LAG(EndStock, 1,0) over(partition by ProductCategoryName,ProductName ORDER BY stockYear)))
	END AS Diff

  FROM ProductStockByYear
